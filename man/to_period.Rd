% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rutils.R
\name{to_period}
\alias{to_period}
\title{Aggregate an \emph{OHLC} time series to a lower periodicity.}
\usage{
to_period(
  ohlc,
  period = "minutes",
  k = 1,
  endpoints = xts::endpoints(ohlc, period, k)
)
}
\arguments{
\item{\code{ohlc}}{An \emph{OHLC} time series of prices in \emph{xts}
format.}

\item{\code{period}}{aggregation interval ("seconds", "minutes", "hours",
"days", "weeks", "months", "quarters", and "years").}

\item{\code{k}}{The number of periods to aggregate over (for example if
\code{period="minutes"} and \code{k=2}, then aggregate over two minute
intervals.)}

\item{\code{endpoints}}{An integer vector of end points.}
}
\value{
A \emph{OHLC} time series of prices in \emph{xts} format, with a
  lower periodicity defined by the endpoints.
}
\description{
Given an \emph{OHLC} time series at high periodicity (say seconds),
calculates the \emph{OHLC} prices at a lower periodicity (say minutes).
}
\details{
The function \code{to_period()} performs a similar aggregation as
  function \code{xts::to.period()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}, but has
  the flexibility to aggregate to a user-specified vector of end points. The
  function \code{to_period()} simply calls the compiled function
  \code{toPeriod()} (from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}), to
  perform the actual aggregations.  If \code{endpoints} are passed in
  explicitly, then the \code{period} argument is ignored.
}
\examples{
\dontrun{
# Define end points at 10-minute intervals (HighFreq::SPY is minutely bars)
endpoints <- rutils::calc_endpoints(HighFreq::SPY["2009"], interval=10)
# Aggregate over 10-minute endpoints:
rutils::to_period(ohlc=HighFreq::SPY["2009"], endpoints=endpoints)
# Aggregate over days:
rutils::to_period(ohlc=HighFreq::SPY["2009"], period="days")
# Equivalent to:
xts::to.period(x=HighFreq::SPY["2009"], period="days", name=rutils::get_name(colnames(HighFreq::SPY)[1])
}

}
