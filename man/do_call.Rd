% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rutils.R
\name{do_call}
\alias{do_call}
\title{Recursively apply a function to a list of objects, such as \emph{xts} time
series.}
\usage{
do_call(func_tion, li_st, ...)
}
\arguments{
\item{\code{func_tion}}{The name of function that returns a single object
from a list of objects.}

\item{\code{li_st}}{A list of objects, such as \emph{vectors},
\emph{matrices}, \emph{data frames}, or \emph{time series}.}

\item{\code{...}}{Additional arguments to function \code{func_tion()}.}
}
\value{
A single \emph{vector}, \emph{matrix}, \emph{data frame}, or
  \emph{time series}.
}
\description{
Performs a similar operation as \code{do.call()}, but using recursion, which
is much faster and uses less memory. The function \code{do_call()} is a
generalization of function \code{do_call_rbind()}.
}
\details{
The function \code{do_call()} performs an lapply loop, each time
  binding neighboring elements and dividing the length of \code{li_st} by
  half. The result of performing \code{do_call(rbind, list_xts)} on a list of
  \emph{xts} time series is identical to performing \code{do.call(rbind,
  list_xts)}. But \code{do.call(rbind, list_xts)} is very slow, and often
  causes an \sQuote{out of memory} error.
}
\examples{
# Create xts time series
x_ts <- xts(x=rnorm(1000), order.by=(Sys.time()-3600*(1:1000)))
# Split time series into daily list
list_xts <- split(x_ts, "days")
# rbind the list back into a time series and compare with the original
identical(x_ts, rutils::do_call(rbind, list_xts))
}
