% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rutils.R
\name{calc_endpoints}
\alias{calc_endpoints}
\title{Calculate a vector of equally spaced end points along the elements of a
vector, matrix, or time series.}
\usage{
calc_endpoints(xtsv, interval, stub_front = TRUE)
}
\arguments{
\item{\code{xtsv}}{A vector, matrix, or time series.}

\item{\code{interval}}{The number of elements between neighboring end
points. or a \emph{string} representing a time period (minutes, hours,
days, etc.)}

\item{\code{stub_front}}{A \emph{Boolean} argument: if \code{TRUE} then add a
stub interval at the beginning, else add a stub interval at the end. (the
default is \code{TRUE})}
}
\value{
An \emph{integer} vector of equally spaced end points (vector of
  integers).
}
\description{
Calculate a vector of equally spaced end points along the elements of a
vector, matrix, or time series.
}
\details{
The end points are a vector of integers which divide the elements
  (rows) of \code{xtsv} into equally spaced intervals.

  If \code{interval} is an \emph{integer} then \code{calc_endpoints()}
  calculates the number of whole intervals that fit over the elements (rows)
  of \code{xtsv}.
  If a whole number of intervals doesn't fit over the elements (rows) of
  \code{xtsv}, then \code{calc_endpoints()} adds a stub interval either at
  the beginning (the default) or at the end.

  If \code{interval} is a \emph{string} representing a time period (minutes,
  hours, days, etc.), then \code{calc_endpoints()} simply calls the function
  \code{endpoints()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}.

  The function \code{calc_endpoints()} is a generalization of function
  \code{endpoints()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}, since
  \code{interval} can accept both \emph{integer} and \emph{string} values.
  Similar to \code{xts::endpoints()}, the first integer returned by
  \code{calc_endpoints()} is equal to zero.
}
\examples{
# Calculate end points with initial stub interval
rutils::calc_endpoints(1:100, interval=11)
# Calculate end points with a stub interval at the end
rutils::calc_endpoints(rutils::etfenv$VTI, interval=365, stub_front=FALSE)
# Calculate end points at the end of every hour
rutils::calc_endpoints(rutils::etfenv$VTI, interval="hours")
}
